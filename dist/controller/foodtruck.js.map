{"version":3,"sources":["../../src/controller/foodtruck.js"],"names":["config","db","api","post","req","res","newFoodTruck","name","body","foodtype","avgcost","geometry","coordinates","long","foodtruck","lat","save","err","send","json","message","get","find","foodtrucks","findById","params","id","put","delete","status","remove","_id","review","newReview","title","text","reviews","push"],"mappings":"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","file":"foodtruck.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport { Router } from 'express';\r\nimport FoodTruck from '../model/foodtruck';\r\nimport Review from '../model/review';\r\nimport bodyParser from 'body-parser';\r\n\r\nimport { authenticate} from '../middleware/authmiddleware'; //to allow restriction of acces in some routes\r\n\r\nexport default({ config, db }) => {\r\n  let api = Router();\r\n\r\n// CRUD - Create Read Update Delete\r\n\r\n// '/v1/foodtruck/add' = Create\r\napi.post('/add', authenticate, (req, res) => {  // if we remove the comments from /*authenticate,*/ then it will require login before you can create a new foodtruck\r\n    let newFoodTruck = new FoodTruck();\r\n    newFoodTruck.name = req.body.name;\r\n    newFoodTruck.foodtype = req.body.foodtype;\r\n    newFoodTruck.avgcost = req.body.avgcost;\r\n    newFoodTruck.geometry.coordinates.long = req.body.geometry.coordinates.long;\r\n    foodtruck.geometry.coordinates.lat = req.body.geometry.coordinates.lat;\r\n    // save is a method from mongoose\r\n    newFoodTruck.save(err => {\r\n      if(err) {\r\n        res.send(err);\r\n      }\r\n      res.json({ message:'FoodTruck saved successfully' });\r\n    });\r\n  });\r\n\r\n// '/v1/foodtruck'  - Read\r\napi.get('/', (req, res) => {\r\n  FoodTruck.find({}, (err, foodtrucks) => {\r\n  //empty {} means to get everything. If we put something it wil return that.\r\n  // => (err, foodtrucks) means we either will get an error or a foodtrucks\r\n\r\n  // if we get an error, we will send it back with the response to the client\r\n  if(err){\r\n    res.send(err);\r\n  }\r\n  //if we donÂ´t get the error, we get all the foodtrucks and we send it back\r\n  //in the response as a json\r\n  res.json(foodtrucks);\r\n  });\r\n});\r\n\r\n//How to read one specific registry not all\r\n// '/v1/foodtruck/:id' - Read\r\napi.get('/:id', (req, res) => {\r\n  FoodTruck.findById(req.params.id, (err, foodtruck) => {\r\n    if(err) {\r\n      res.send(err);\r\n    }\r\n    //res.send(foodtruck.name);\r\n    res.json(foodtruck);\r\n  });\r\n});\r\n\r\n// Read all foodtrucks by foodtype\r\n// '/v1/foodtruck/foodtype/:foodtype'\r\napi.get('/foodtype/:foodtype', (req, res) => {\r\n  FoodTruck.find({ foodtype: req.params.foodtype }, (err, foodtruck) => {\r\n    if(err) {\r\n      res.send(err);\r\n    }\r\n    res.json(foodtruck);\r\n  });\r\n});\r\n\r\n// Update the record with a put method\r\n// '/v1/foodtruck/:id' - Update\r\napi.put('/:id', authenticate, (req, res) => {\r\n  FoodTruck.findById(req.params.id, (err, foodtruck) => {\r\n    if(err) {\r\n      res.send(err);\r\n    }\r\n    // save the name of the foodtruck in the db just like the one from the\r\n    // request body\r\n    foodtruck.name = req.body.name;\r\n    foodtruck.foodtype = req.body.foodtype;\r\n    foodtruck.avgcost = req.body.avgcost;\r\n    foodtruck.geometry.coordinates.lat = req.body.geometry.coordinates.lat;\r\n    foodtruck.geometry.coordinates.long = req.body.geometry.coordinates.long;\r\n    foodtruck.save(err => {\r\n      if(err) {\r\n        res.send(err);\r\n      }\r\n      res.json({message: \"FoodTruck info updated\" });\r\n    });\r\n  });\r\n});\r\n\r\n// Remove a foodtruck and it's reviews\r\n// '/v1/foodtruck/:id' - Delete\r\napi.delete('/:id', authenticate, (req, res) => {\r\n  FoodTruck.findById(req.params.id, (err, foodtruck) => {\r\n    if (err) {\r\n      // we can inform of the status code and send whatever we want to the console.\r\n      res.status(500).send(err);\r\n      return;\r\n    }\r\n    if (foodtruck == null) {\r\n      // yo can check for the meanings of the satus codes online\r\n      res.status(404).send(\"Foodtruck not found\");\r\n      return;\r\n    }\r\n    FoodTruck.remove({\r\n      _id: req.params.id\r\n    }, (err, foodtruck) => {\r\n      if(err) {\r\n        res.status(500).send(err);\r\n        return;\r\n      }\r\n      Review.remove({ foodtruck: req.params.id }, (err, review) => {\r\n        if(err) {\r\n          res.send(err);\r\n        }\r\n        res.json({message: \"FoodTruck and Reviews removed OK\" });\r\n      });\r\n    });\r\n  });\r\n});\r\n  \r\n\r\n// add review for a specific foodtruck id\r\n// '/v1/foodtruck/reviews/add/:id'\r\napi.post('/reviews/add/:id', authenticate, (req, res) => {\r\n  FoodTruck.findById(req.params.id, (err, foodtruck) => {\r\n    if(err) {\r\n      res.send(err);\r\n    }\r\n    let newReview = new Review();\r\n    newReview.title = req.body.title;\r\n    newReview.text = req.body.text;\r\n    newReview.foodtruck = foodtruck._id; //link the foodtruck id to the review\r\n    newReview.save((err, review) => {\r\n      if(err) {\r\n        res.send(err);\r\n      }\r\n      // we have to push the object to the end of the array of reviews\r\n      // and we have to save it!\r\n      foodtruck.reviews.push(newReview);\r\n      foodtruck.save(err => {\r\n        if(err) {\r\n          res.send(err);\r\n        }\r\n        res.json({ message: 'Food truck review saved!' });\r\n      });\r\n    });\r\n  });\r\n});\r\n\r\n//get reviews for a specific food truck id\r\n// '/v1/foodtruck/reviews/:id'\r\napi.get('/reviews/:id', (req, res) => {\r\n  Review.find({ foodtruck: req.params.id }, (err, reviews) => {\r\n    if(err) {\r\n      res.send(err);\r\n    }\r\n    res.json(reviews);\r\n  });\r\n});\r\n\r\n  return api;  /////////////////\r\n\r\n}\r\n"]}